---
title: "My document"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
    self-contained: true
---

```{=html}
<!-- Plotly.js Library -->
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<div id="plot"></div>

<script>
    // Example data for offenses
    var offenses = ['False Pretenses/Swindle/Confidence Game', 'Sexual Assault With An Object',
                    'Destruction/Damage/Vandalism of Property', 'Simple Assault', 'Fondling', 'Animal Cruelty'];
    var counts = [5, 1, 430, 676, 55, 2];

    // Example data for locations (specific to the first offense for simplicity)
    var locations = ['Air/Bus/Train Terminal', 'Parking/Drop Lot/Garage'];
    var locationCounts = [3, 14];

    // Create the first plot with total offenses by name
    var trace1 = {
        x: offenses,
        y: counts,
        type: 'bar',
        name: 'Total Offenses by Name'
    };

    // Create the second plot, initially empty
    var trace2 = {
        x: [],
        y: [],
        type: 'bar',
        name: 'Offense Count by Location',
        xaxis: 'x2',
        yaxis: 'y2'
    };

    var data = [trace1, trace2];
    var layout = {
        title: 'Interactive Offense Data Visualization',
        grid: {rows: 1, columns: 2, subplots: [['xy', 'x2y2']]},
        showlegend: false
    };

    Plotly.newPlot('offense-plot', data, layout);

    // Set up interaction: click event on the first plot updates the second plot
    document.getElementById('offense-plot').on('plotly_click', function(data){
        var pts = data.points;
        if (pts.length > 0 && pts[0].fullData.name === 'Total Offenses by Name') {
            // Assuming the index of the bar clicked corresponds to the data arrays
            var offenseIndex = pts[0].pointIndex;

            // Update the second plot with related data (simplified to use static location data)
            if (offenseIndex === 0) {  // Updating when the first offense is clicked
                Plotly.restyle('offense-plot', {
                    'x': [locations],
                    'y': [locationCounts]
                }, [1]);  // Target the second trace for updating
            }
        }
    });
</script>
